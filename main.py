import asyncio  
import logging
import requests
from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.filters import Command

logging.basicConfig(level=logging.INFO)

TOKEN = "7680078478:AAEqviFBOwhaOAaY4Osbcof6li54l6fTIxg"
NEWS_API_KEY = "8f6b05a1fc844e58a8e977cd1465f435"


bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))


dp = Dispatcher()
router = Router()



@router.message(Command("start"))
async def bot_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∏—Ä–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö!\n\n"
        f"–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã!"
    )

@router.message(Command("help"))
async def bot_help(message: Message):
    await message.answer(
        "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start - —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n"
        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/news <i><b>—Ç–µ–º–∞</b></i> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ"
    )

@router.message(Command("news"))
async def cmd_news(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /news!")
        return

    topic = args[1]
    try:
        
        response = requests.get(
            f"https://newsapi.org/v2/everything?q={topic}&apiKey={NEWS_API_KEY}"
        )
        response.raise_for_status()
        data = response.json()

        if data["articles"]:
            articles = data["articles"][:3]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π
            news = "\n\n".join(
                [
                    f"üì∞ <b>{article['title']}</b>\n{article['description']}\n"
                    f"–ò—Å—Ç–æ—á–Ω–∏–∫: {article['source']['name']}\n"
                    f"–°—Å—ã–ª–∫–∞: {article['url']}"
                    for article in articles
                ]
            )
            await message.answer(news)
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.")
    except requests.exceptions.RequestException:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ—Å—Ç—è—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–º—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message()
async def echo_message(message: Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è, –Ω–∞–ø–∏—à–∏ /help")


dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
